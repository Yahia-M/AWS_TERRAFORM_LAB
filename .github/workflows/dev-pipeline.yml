name: 🔧 Dev Pipeline with SonarQube

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'

jobs:
  sonarqube-analysis:
    name: 📊 SonarQube Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis
          
      - name: 🔍 SonarQube Scan
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          BRANCH_NAME: ${{ github.ref_name }}

  terraform-validation:
    name: 🏗️ Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        
      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: 🔧 Terraform Init
        run: |
          cd lab/infra
          terraform init -backend=false
          
      - name: ✅ Terraform Validate
        run: |
          cd lab/infra
          terraform validate
          
      - name: 📝 Terraform Format Check
        run: |
          cd lab/infra
          terraform fmt -check=true -diff=true

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        
      - name: 🛡️ Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: lab/infra
          framework: terraform
          soft_fail: false
          output_format: json
          output_file_path: reports/checkov-report.json
          
      - name: 📋 Upload Checkov Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: checkov-report
          path: reports/checkov-report.json

  tflint-analysis:
    name: 🔍 TFLint Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest
          
      - name: 🔍 Run TFLint
        run: |
          cd lab/infra
          tflint --init
          tflint

  terraform-plan-dev:
    name: 📋 Terraform Plan (Dev)
    runs-on: ubuntu-latest
    needs: [terraform-validation, security-scan]
    if: github.event_name == 'push'
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        
      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: 🔧 Terraform Init
        run: |
          cd lab/infra
          terraform init -backend=false
          
      - name: 📋 Terraform Plan
        run: |
          cd lab/infra
          terraform plan -var-file="vars/dev.tfvars" -out=dev.tfplan
          
      - name: 📤 Upload Plan
        uses: actions/upload-artifact@v3
        with:
          name: dev-terraform-plan
          path: lab/infra/dev.tfplan

  quality-gate:
    name: 🎯 Quality Gate
    runs-on: ubuntu-latest
    needs: [sonarqube-analysis, terraform-validation, security-scan, tflint-analysis]
    
    steps:
      - name: ✅ Quality Gate Passed
        run: |
          echo "🎉 All quality checks passed!"
          echo "✅ SonarQube analysis completed"
          echo "✅ Terraform validation passed"
          echo "✅ Security scan completed"
          echo "✅ TFLint analysis passed"
          echo "🚀 Ready for promotion to staging"

  auto-promote-staging:
    name: 🚀 Auto-promote to Staging
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: 🔧 Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
      - name: 🚀 Promote to Staging
        run: |
          git checkout staging
          git pull origin staging
          git merge --no-ff dev -m "chore: auto-promote dev to staging - $(date '+%Y-%m-%d %H:%M:%S')"
          git push origin staging
          
      - name: 💬 Create Success Comment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: '🚀 **Auto-promotion successful!**\n\nDev branch has been automatically promoted to staging.\n\n✅ All quality gates passed\n🎯 Ready for E2E testing in staging'
            })
